/*
 * FUNCIONES EN ASSEMBLY ARM PARA RASPBERRY PI
 * Proyecto de Arquitectura de Computadoras
 * 
 * Este archivo contiene las implementaciones en ARM assembly de las funciones
 * disp_binary y delay para ser usadas en la Raspberry Pi.
 */

.text
@ Funciones en ARM para Raspberry Pi
@ Para el proyecto de Arquitectura de Computadoras

@ --------------------------------------------
@ Función: disp_binary
@ Muestra los 8 bits de un byte usando * y _
@ --------------------------------------------
.global disp_binary
disp_binary:
    STMFD sp!, {r4-r7, lr}    @ Guardamos registros en la pila
    MOV r4, r0                @ r4 = byte a mostrar
    MOV r5, #7                @ r5 = contador de bits

loop_display:
    MOV r6, #1                @ r6 = 1
    LSL r6, r6, r5            @ r6 = 1 << posición
    AND r7, r4, r6            @ r7 = byte & máscara
    
    CMP r7, #0                @ Comparamos con 0
    MOVEQ r0, #'_'            @ Si es 0, mostramos _
    MOVNE r0, #'*'            @ Si es 1, mostramos *
    BL putchar                @ Llamamos a putchar
    
    SUBS r5, r5, #1           @ Decrementamos contador
    BPL loop_display          @ Si es >= 0, seguimos
    
    MOV r0, #'\n'             @ Nueva línea
    BL putchar                @ Imprimimos nueva línea
    
    LDMFD sp!, {r4-r7, pc}    @ Restauramos registros y retornamos

@ --------------------------------------------
@ Función: delay
@ Genera un retardo preciso
@ --------------------------------------------
.global delay
delay:
    STMFD sp!, {r4, lr}       @ Guardamos registros
    MOV r4, r0                @ r4 = ticks
    LSL r4, r4, #8            @ r4 = ticks * 256

loop_delay:
    SUBS r4, r4, #1           @ Decrementamos contador
    BNE loop_delay            @ Si no es 0, seguimos
    
    LDMFD sp!, {r4, pc}       @ Restauramos y retornamos

@ --------------------------------------------
@ INSTRUCCIONES DE USO:
@ 1. Guardar este archivo como funciones_arm.txt
@ 2. En la Raspberry Pi:
@    - as -o funciones_arm.o funciones_arm.txt
@    - gcc -o programa main.c funciones_arm.o
@ --------------------------------------------

/*
 * NOTAS DE USO:
 * 1. Este código debe ser ensamblado con el ensamblador GNU (as)
 * 2. Para compilar:
 *    as -o funciones_arm.o funciones_arm.s
 *    gcc -o programa main.c funciones_arm.o
 * 
 * 3. Las funciones siguen la convención de llamadas ARM EABI:
 *    - Los parámetros se pasan en r0-r3
 *    - Los registros r4-r11 deben ser preservados
 *    - El resultado se devuelve en r0
 * 
 * 4. La función delay está calibrada para la Raspberry Pi.
 *    Puede necesitar ajustes dependiendo de la frecuencia del procesador.
 */ 